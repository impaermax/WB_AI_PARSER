import os
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from parser import WBProductParser

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WB_DOMAINS = ['wildberries.ru', 'www.wildberries.ru']
MAX_HTML_LENGTH = 3500  # –° –∑–∞–ø–∞—Å–æ–º –¥–ª—è Markdown

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
parser = WBProductParser()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = update.message.text.strip()
        
        if not any(domain in url for domain in WB_DOMAINS):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries")
            return

        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {url}")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        result = parser.parse_product(url)
        
        if not result['success']:
            raise Exception(result['error'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = format_response(result)
        html_preview = escape_markdown(result['raw_html'][:MAX_HTML_LENGTH])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await update.message.reply_text(response, parse_mode='MarkdownV2')
        await update.message.reply_text(
            f"`{html_preview}...`\n\n‚ö†Ô∏è HTML –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logging.error(error_msg)
        await update.message.reply_text(error_msg)

def format_response(data):
    return f"""
üì¶ *Wildberries Parser Report* üì¶

üÜî *–ê—Ä—Ç–∏–∫—É–ª:* `{data['product_id']}`
üìõ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {escape_markdown(data['name'])}
üí∞ *–¶–µ–Ω–∞:* {data['price']['current']} {'(–°–∫–∏–¥–∫–∞!' if data['price']['original'] else '')}
{"üéØ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: " + data['price']['original'] if data['price']['original'] else ''}

üè™ *–ü—Ä–æ–¥–∞–≤–µ—Ü:*
ID: `{data['seller']['id']}`
–ù–∞–∑–≤–∞–Ω–∏–µ: {escape_markdown(data['seller']['name'])}
–°—Å—ã–ª–∫–∞: {data['seller']['url']}

‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {data['rating']['score']} ({data['rating']['reviews']} –æ—Ç–∑—ã–≤–æ–≤)
üì∑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:* {len(data['images'])}
üìã *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:* {len(data['characteristics'])} –ø–æ–∑–∏—Ü–∏–π
    """.strip()

def escape_markdown(text):
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
